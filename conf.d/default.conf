# Redirect all HTTP traffic to HTTPS
server {
    listen 80 default_server;
    server_name _;
    return 301 https://$host$request_uri;
}

server {
    # http2 protocol includes some security and performance updates
    listen 443 ssl http2;

    server_name _;
    root /usr/share/nginx/html;

#    modsecurity on;
#    modsecurity_rules_file /etc/nginx/modsecurity/modsecurity.conf;

    # Supplying our self-signed certificate for HTTPS
    ssl_certificate /etc/nginx/ssl/public.pem;
    ssl_certificate_key /etc/nginx/ssl/private.key;

    # Improves performance of HTTPS traffic
    ssl_session_timeout 1d;
    ssl_session_cache shared:SSL:50m;
    ssl_session_tickets off;
    ssl_protocols TLSv1.2;
    ssl_ciphers 'ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256';
    ssl_prefer_server_ciphers on;

    # Use HSTS to force HTTPS on the entire domain
    add_header Strict-Transport-Security max-age=147680000;

#    ssl_stapling on;

    rewrite ^(/.*)\.html(\?.*)?$ $1$2 redirect;
    # example.com/admin.html?debug=true => admin debug=true

    rewrite ^/(.*)/$ /$1 redirect;
    # example.com/admin/ => example.com/admin

    location / {
        try_files $uri/index.html $uri.html $uri/ $uri =404;
    }

    # Users who want to access /admin.html will need to be authenticated
    location = /admin {

        auth_basic "Login is required for this page.";

        # `yum install httpd-tools` to use the htpasswd utility to generate pw
        auth_basic_user_file /etc/nginx/.htpasswd; 

        try_files $uri/index.html $uri.html $uri/ $uri =404;
    }

    error_page 404 /404.html;
    error_page 500 501 502 503 504 /50x.html;
}
