# Load balancing across three application servers (different ports, in this case)
upstream photos {

    # Define the load balancing algorithm (round robin is default)
    #ip_hash;
    #hash $request_uri;
    #least_conn;

    # /etc/systemd/system/web-client.service
    server 127.0.0.1:3000 weight=2;

    # if we receive 3 failed requests within 20 seconds, remove the
    # server from the pool for 20 seconds.
    server 127.0.0.1:3100 max_fails=3 fail_timeout=20s;
    server 127.0.0.1:3101 max_fails=3 fail_timeout=20s;

    # number of cached connections between nginx <--> photo server
    keepalive 32;
}

server {

    listen 80;

    # For testing, edit /etc/hosts and make this machine's IP point to photos.example.com
    server_name photos.example.com;

    access_log /var/log/nginx/access.log vhost;

    location / {

        # Reverse proxy to the pool of three application servers upstream
        proxy_pass http://photos;

        proxy_http_version 1.1;

        # Read the nginx docs for more info about header settings
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";

        # Adjust this to restrict the image size limit a user can upload
        client_max_body_size 5m;
    }

    # If the requested uri ends in something static, bypass the app server
    # and serve the static assets from /var/www/photos.example.com
    location ~* \.(js|css|png|jpe?g|gif)$ {
        root /var/www/photos.example.com;
    }
}
